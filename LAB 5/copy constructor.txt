In C++, a copy constructor is called in several situations where an object is being initialized with another object of the same type. Here are the common scenarios:

Initialization with Another Object: When you create a new object and initialize it with an existing object, the copy constructor is used.

cpp
Copy code
MyClass obj1;     // Default constructor
MyClass obj2 = obj1;  // Copy constructor called
Passing by Value: When you pass an object by value to a function, the copy constructor is called to create a copy of the object.

cpp
Copy code
void foo(MyClass obj) {
    // Use obj
}

MyClass obj1;
foo(obj1);  // Copy constructor called
Returning by Value: When you return an object from a function by value, the copy constructor may be called to create a copy of the returned object.

cpp
Copy code
MyClass createObject() {
    MyClass obj;
    return obj;  // Copy constructor called (or move constructor, if available)
}

MyClass obj1 = createObject();  // Copy constructor called (or move constructor)
Object Assignment: When assigning one object to another, the copy assignment operator is called, not the copy constructor. However, it's worth noting that both the copy constructor and copy assignment operator are related.

cpp
Copy code
MyClass obj1, obj2;
obj1 = obj2;  // Copy assignment operator called
Passing by Value in Constructors: When an object is initialized as a member of another object through a constructor, the copy constructor might be used.

cpp
Copy code
class AnotherClass {
public:
    AnotherClass(MyClass obj) : member(obj) { }
private:
    MyClass member;
};
Note that if a class has a user-defined copy constructor, and if you don't provide one, the compiler generates a default copy constructor. This default constructor performs a shallow copy of the object's data members. If your class manages resources like dynamic memory, you may need to provide your own copy constructor to perform a deep copy to avoid issues such as double deletion.